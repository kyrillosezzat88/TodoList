{"version":3,"sources":["todoList.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","Delete","TodoList","length","map","todo","react_default","a","createElement","className","key","id","onClick","Content","AddTodo","state","changeinput","e","_this","setState","Object","defineProperty","target","name","value","handelSubmit","preventDefault","props","addtodos","onSubmit","this","htmlFor","type","onChange","Component","App","DeleteTodo","newTodo","filter","addTodo","NewTodo","Math","random","concat","toConsumableArray","todoList","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAoBeA,EAnBD,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,OACbC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACvCL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,WAAOX,EAAOI,EAAKM,MAAlC,IAA0CN,EAAKQ,QAA/C,QAKZP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,+BAEJ,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVP,WCaEY,6MA1BXC,MAAO,CACHF,QAAS,MAEbG,YAAc,SAACC,GACXC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOC,KAAQN,EAAEK,OAAOE,WAGnCC,aAAe,SAACR,GACZA,EAAES,iBACFR,EAAKS,MAAMC,SAASV,EAAKH,OACzBG,EAAKC,SAAS,CACVN,QAAS,8EAIb,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUC,KAAKL,cACjBnB,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,QAAf,gBACAzB,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOT,KAAK,UAAUU,SAAUH,KAAKd,YAAaQ,MAAOM,KAAKf,MAAMF,mBArB9EqB,aCmCPC,6MAhCbpB,MAAO,CACLjB,MAAO,CACL,CAACa,GAAG,EAAGE,QAAQ,eACf,CAACF,GAAG,EAAIE,QAAS,qBAGrBuB,WAAa,SAACzB,GACZ,IAAI0B,EAAUnB,EAAKH,MAAMjB,MAAMwC,OAAO,SAAAjC,GACpC,OAAOA,EAAKM,KAAOA,IAErBO,EAAKC,SAAS,CACZrB,MAAMuC,OAGVE,QAAU,SAACC,GACTA,EAAQ7B,GAAK8B,KAAKC,SAClB,IAAIrC,EAAI,GAAAsC,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAOF,EAAKH,MAAMjB,OAAlB,CAA0B0C,IAClCtB,EAAKC,SAAS,CACZrB,MAAMO,6EAIR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,aACAH,EAAAC,EAAAC,cAACqC,EAAD,CAAO7C,MAAQ8B,KAAKf,MAAMjB,MAAOG,OAAQ6B,KAAKM,aAC9C9B,EAAAC,EAAAC,cAACsC,EAAD,CAASlB,SAAWE,KAAKS,kBA3BfL,aCSEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8dc8998a.chunk.js","sourcesContent":["import React from 'react';\r\nconst Todos = ({todos, Delete}) => {\r\n    const TodoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return(\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span onClick={() => {Delete(todo.id)}}> {todo.Content} </span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center red-text\">you dont have any todo yay!</p>\r\n    )\r\n    return(\r\n        <div className=\"todos collection\">\r\n            {TodoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos","import React , {Component} from 'react';\r\nclass AddTodo extends Component {\r\n    state ={\r\n        Content: ''\r\n    }\r\n    changeinput = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    handelSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addtodos(this.state);\r\n        this.setState({\r\n            Content: ''\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handelSubmit}>\r\n                    <label htmlFor=\"todo\">Add New Todo</label>\r\n                    <input type=\"text\" name=\"Content\" onChange={this.changeinput} value={this.state.Content} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddTodo","import React, { Component } from 'react';\nimport Todos from './todoList';\nimport AddTodo from './AddTodo';\nclass App extends Component {\n  state ={\n    Todos: [\n      {id:1, Content:'Buy new Car'},\n      {id:2 , Content: 'buy suplemnts'}\n    ]\n  }\n  DeleteTodo = (id) => {\n    let newTodo = this.state.Todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      Todos:newTodo\n    })\n  }\n  addTodo = (NewTodo) => {\n    NewTodo.id = Math.random();\n    let todo = [...this.state.Todos , NewTodo]\n    this.setState({\n      Todos:todo\n    })\n  }\n  render() {\n    return (\n      <div className=\"App container \">\n        <h1 className=\"center blue-text\">TODO List</h1>\n        <Todos todos ={this.state.Todos} Delete={this.DeleteTodo}/>\n        <AddTodo addtodos ={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}